<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <title>AI Director Teleprompter</title>
  <link rel="stylesheet" href="/views/styles/teleprompter.css" />
</head>

<body>
  <!-- New Video element for live stream -->
  <video id="teleprompterLiveFeed" autoplay muted playsinline></video>

  <!-- Temporarily comment out the other video container and element -->
  <!-- 
  <div id="video-container">
    <video id="teleprompter-video" autoplay playsinline></video>
  </div>
  -->
  <div id="teleprompter"></div>

  <!-- Temporarily comment out the entire script block -->
  <script>
    let ws;
    const teleprompter = document.getElementById("teleprompter");
    // const videoContainer = document.getElementById("video-container"); // Already commented
    const liveFeedVideoElement = document.getElementById("teleprompterLiveFeed"); // This is the important one
    let isFaded = false; // This is unused as toggleFade is commented

    /* // Comment out addMessage function
    function addMessage(text, style, headshotImage, qrCodeImage) {
      const message = document.createElement("div");
      message.className = "message " + (style || "normal");

      const content = document.createElement("div");
      content.className = "message-content";

      if (text.includes(":")) {
        const [character, action] = text.split(":").map((s) => s.trim());
        content.innerHTML = "<strong>" + character + ":</strong> " + action;
      } else {
        content.textContent = text;
      }

      message.appendChild(content);

      const imageContainer = document.createElement("div");
      imageContainer.className = "message-image-container";

      if (headshotImage) {
        const headshotImg = document.createElement("img");
        headshotImg.className = "message-image headshot";
        headshotImg.src = headshotImage;
        imageContainer.appendChild(headshotImg);
      }

      if (qrCodeImage) {
        const qrImg = document.createElement("img");
        qrImg.className = "message-image qrcode";
        qrImg.src = qrCodeImage;
        imageContainer.appendChild(qrImg);
      }

      if (imageContainer.hasChildNodes()) {
        message.appendChild(imageContainer);
      }

      if (teleprompter.firstChild) {
        teleprompter.insertBefore(message, teleprompter.firstChild);
      } else {
        teleprompter.appendChild(message);
      }

      requestAnimationFrame(() => {
        message.classList.add("new");
        setTimeout(() => {
          message.classList.remove("new");
        }, 50);
      });

      const maxMessages = 10;
      while (teleprompter.children.length > maxMessages) {
        const lastMessage = teleprompter.lastChild;
        lastMessage.classList.add("old");
        setTimeout(() => {
          lastMessage.remove();
        }, 500);
      }
    }
    */

    function clearText() {
      const messages = teleprompter.children;
      for (let i = 0; i < messages.length; i++) {
        messages[i].classList.add("old");
      }
      setTimeout(() => {
        teleprompter.innerHTML = "";
      }, 500);
    }

    /* // Comment out playVideo function
    function playVideo(videoPath) {
      videoElement.src = videoPath;
      videoContainer.classList.add("active");

      videoElement.onended = () => {
        videoContainer.classList.remove("active");
      };
    }
    */

    // New function to display actor calls in a grid
    function addActorCallsMessage(actors, revealSequentially) { // Added revealSequentially parameter
      const messageContainer = document.createElement("div");
      messageContainer.className = "message actor-calls-container";

      const title = document.createElement("h2");
      title.textContent = "Actors Called:";
      title.className = "actor-calls-title";
      messageContainer.appendChild(title);

      const gridContainer = document.createElement("div");
      gridContainer.className = "actor-grid";
      messageContainer.appendChild(gridContainer);

      if (teleprompter.firstChild) {
        teleprompter.insertBefore(messageContainer, teleprompter.firstChild);
      } else {
        teleprompter.appendChild(messageContainer);
      }

      requestAnimationFrame(() => {
        messageContainer.classList.add("new");
        setTimeout(() => {
          messageContainer.classList.remove("new");
        }, 50);
      });

      const maxMessages = 10;
      while (teleprompter.children.length > maxMessages) {
        const lastMessage = teleprompter.lastChild;
        lastMessage.classList.add("old");
        setTimeout(() => {
          lastMessage.remove();
        }, 500);
      }

      function buildAndAddCardToGrid(actor) {
        const actorCard = document.createElement("div");
        actorCard.className = "actor-card";

        if (actor.headshotImage) {
          const headshotImg = document.createElement("img");
          headshotImg.className = "message-image headshot";
          headshotImg.src = actor.headshotImage;
          headshotImg.alt = `${actor.name} headshot`;
          actorCard.appendChild(headshotImg);
        }

        const textInfo = document.createElement("p");
        textInfo.className = "actor-card-text";
        const displayName = actor.characterFullName || actor.character || "Unknown Character";
        textInfo.innerHTML = `<strong>${actor.name || "Unknown Actor"}</strong> as ${displayName}`;
        actorCard.appendChild(textInfo);

        if (actor.propImages && Array.isArray(actor.propImages) && actor.propImages.length > 0) {
          const propsContainer = document.createElement('div');
          propsContainer.className = 'actor-card-props-container';
          actor.propImages.forEach(propImageUrl => {
            const propImg = document.createElement("img");
            propImg.className = "message-image prop-image";
            propImg.src = propImageUrl;
            const propName = propImageUrl.split('/').pop().split('.')[0];
            propImg.alt = `${actor.character} prop: ${propName}`;
            propsContainer.appendChild(propImg);
          });
          actorCard.appendChild(propsContainer);
        }

        if (actor.qrCodeImage) {
          const qrImg = document.createElement("img");
          qrImg.className = "message-image qrcode";
          qrImg.src = actor.qrCodeImage;
          qrImg.alt = `${actor.character} QR Code`;
          actorCard.appendChild(qrImg);
        } else if (actor.error) {
          const errorText = document.createElement("p");
          errorText.className = "actor-card-error";
          errorText.textContent = actor.error;
          actorCard.appendChild(errorText);
        }

        gridContainer.appendChild(actorCard);

        actorCard.style.opacity = 0;
        requestAnimationFrame(() => {
          actorCard.style.transition = "opacity 0.5s ease-in-out";
          actorCard.style.opacity = 1;
        });
      }

      if (revealSequentially) {
        let currentIndex = 0;
        const delayBetweenCards = 1000;

        function displayNextCard() {
          if (currentIndex < actors.length) {
            buildAndAddCardToGrid(actors[currentIndex]);
            currentIndex++;
            setTimeout(displayNextCard, delayBetweenCards);
          }
        }
        if (actors && actors.length > 0) {
          displayNextCard();
        }
      } else {
        // Display all at once (original behavior, but with individual card animation)
        if (actors && actors.length > 0) {
          actors.forEach(actor => {
            buildAndAddCardToGrid(actor);
          });
        }
      }
    }

    function handleWebSocketMessage(event) {
      const data = JSON.parse(event.data);
      console.log("Teleprompter received via WebSocket:", data);

      if (data.type === "ACTOR_CALLS") {
        console.log("Adding actor calls message:", data.actors, "Reveal sequentially:", data.revealSequentially);
        addActorCallsMessage(data.actors, data.revealSequentially); // Pass the flag
      }
      else if (data.type === "CLEAR_TELEPROMPTER") {
        clearText();
      }
    }

    function connectWebSocket() {
      ws = new WebSocket("ws://" + window.location.host);
      ws.onopen = function () {
        console.log("Teleprompter WebSocket connected");
        clearText();
        console.log("Teleprompter cleared on new WebSocket connection.");
      };
      ws.onmessage = handleWebSocketMessage;
      ws.onerror = function (error) {
        console.error("Teleprompter WebSocket error:", error);
        setTimeout(connectWebSocket, 5000);
      };
      ws.onclose = function () {
        console.log("Teleprompter WebSocket closed");
        setTimeout(connectWebSocket, 5000)
      };
    }
    connectWebSocket();

    /* // Comment out toggleFade function
    function toggleFade() {
      isFaded = !isFaded;
      teleprompter.classList.toggle("fade", isFaded);
    }
    */

    function showLiveVideo() {
      if (liveFeedVideoElement) {
        liveFeedVideoElement.classList.add('visible');
        console.log("Teleprompter live video shown.");
      }
    }

    function hideLiveVideo() {
      if (liveFeedVideoElement) {
        liveFeedVideoElement.classList.remove('visible');
        console.log("Teleprompter live video hidden.");
      }
    }

    function setLiveFeedMirror(isMirrored) {
      if (liveFeedVideoElement) {
        liveFeedVideoElement.style.transform = isMirrored ? 'scaleX(-1)' : 'none';
        console.log(`Teleprompter live feed mirroring set to: ${isMirrored}`);
      }
    }
  </script>
</body>

</html>