<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <title>AI Director Interface</title>
    <link rel="stylesheet" href="/views/styles/main.css">
</head>

<body>
    <div class="main-content">
        <h1>AI Director Shots</h1>
        <div class="scene-container">
            <% scenes.forEach((scene, idx)=> { %>
                <div class="scene-card" onclick="initScene('<%= encodeURIComponent(scene.directory) %>')">
                    <div class="scene-title">Scene #<%= idx + 1 %>: <%= scene.description %>
                    </div>
                    <img src="./database/scenes/<%= scene.directory %>/thumbnail.jpg" alt="<%= scene.description %>" />
                </div>
                <% }); %>
        </div>
        <div id="videos"></div>
        <div class="controls-section">
            <h2>Console Output</h2>
            <div id="console-output"></div>
        </div>
    </div>
    <div class="sidebar">
        <div class="controls-section">
            <h2>Camera Controls</h2>
            <div class="camera-controls">
                <div class="camera-preview">
                    <video id="webcamPreview" autoplay playsinline></video>
                </div>
                <div class="camera-select">
                    <select id="cameraSelect" onchange="selectCamera(this.value)">
                        <option value="">Select Camera</option>
                    </select>
                    <select id="resolutionSelect" onchange="updateResolution()">
                        <option value="3840x2160">4K (3840x2160)</option>
                        <option value="1920x1080">1080p (1920x1080)</option>
                        <option value="1280x720" selected>720p (1280x720)</option>
                        <option value="640x480">480p (640x480)</option>
                        <option value="640x360">360p (640x360)</option>
                    </select>
                </div>
                <div class="ptz-controls">
                    <div class="control-group">
                        <label>Pan</label>
                        <input type="range" id="panSlider" min="-468000" max="468000" step="3600" value="0"
                            oninput="updatePTZ()">
                        <span id="panValue">0°</span>
                    </div>
                    <div class="control-group">
                        <label>Tilt</label>
                        <input type="range" id="tiltSlider" min="-324000" max="324000" step="3600" value="0"
                            oninput="updatePTZ()">
                        <span id="tiltValue">0°</span>
                    </div>
                    <div class="control-group">
                        <label>O Zoom</label>
                        <input type="range" id="zoomSlider" min="0" max="100" step="1" value="0" oninput="updatePTZ()">
                        <span id="zoomValue">0%</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="controls-section">
            <h2>Controls</h2>
            <div id="buttons">
                <button id="actionBtn" onclick="action()"
                    style="display: none; background-color: #e8f5e9; border-color: #4CAF50; color: #2e7d32;">Action!</button>
                <button id="actorsReadyBtn" onclick="actorsReady()"
                    style="display: none; background-color: #e8f5e9; border-color: #4CAF50; color: #2e7d32;">Actors are
                    Ready</button>
                <button onclick="recordVideo()">Record 3s Video & Process Pose</button>
                <button id="voiceBypassBtn" onclick="toggleVoiceBypass()">Enable Voice Bypass</button>
                <button onclick="openTeleprompter()">Open Teleprompter</button>
                <button onclick="openCharacterTeleprompter('alan')">Open Alan's Teleprompter</button>
                <button onclick="openCharacterTeleprompter('ellie')">Open Ellie's Teleprompter</button>
                <button onclick="testTeleprompter()">Test Teleprompter</button>
                <button onclick="testTeleprompterVideo()">Test Teleprompter Video</button>
                <button onclick="clearTeleprompter()">Clear Teleprompter</button>
                <button onclick="testConsole()">Test Console</button>
                <button onclick="loadActors()">Load New Actors</button>
            </div>
        </div>
        <div id="status"></div>
        <div class="controls-section">
            <h2>Teleprompter Preview</h2>
            <div class="teleprompter-container">
                <iframe id="teleprompter-frame" src="/teleprompter"></iframe>
            </div>
        </div>
    </div>

    <script>
        // WebSocket connection for real-time updates
        const ws = new WebSocket('ws://' + window.location.host);

        ws.onopen = function () {
            console.log('WebSocket connection established');
            appendToConsole('WebSocket connected', 'info');
        };

        ws.onerror = function (error) {
            console.error('WebSocket error:', error);
            appendToConsole('WebSocket error: ' + error.message, 'error');
        };

        ws.onclose = function () {
            console.log('WebSocket connection closed');
            appendToConsole('WebSocket connection closed', 'warn');
        };

        // Voice bypass state
        let voiceBypassEnabled = false;

        function toggleVoiceBypass() {
            voiceBypassEnabled = !voiceBypassEnabled;
            const btn = document.getElementById('voiceBypassBtn');
            btn.textContent = voiceBypassEnabled ? 'Disable Voice Bypass' : 'Enable Voice Bypass';
            btn.style.backgroundColor = voiceBypassEnabled ? '#ff4444' : '#4CAF50';

            // Send the bypass state to the server
            fetch('/setVoiceBypass', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ enabled: voiceBypassEnabled })
            })
                .then(res => res.json())
                .then(info => {
                    document.getElementById('status').innerText = info.message;
                })
                .catch(err => {
                    console.error(err);
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        ws.onmessage = function (event) {
            console.log('Received WebSocket message:', event.data);
            const data = JSON.parse(event.data);
            console.log('Parsed WebSocket data:', data);
            if (data.type === 'CONSOLE') {
                console.log('Handling console message:', data.message);
                appendToConsole(data.message, data.level);
            } else if (data.type === 'ACTORS_CALLED') {
                document.getElementById('actorsReadyBtn').style.display = 'inline-block';
                document.getElementById('status').innerText = 'Waiting for actors to be ready...';
            } else if (data.type === 'ACTORS_READY') {
                document.getElementById('actorsReadyBtn').style.display = 'none';
                document.getElementById('actionBtn').style.display = 'inline-block';
                document.getElementById('status').innerText = 'Actors are ready to perform!';
            }
        };

        function appendToConsole(message, level = 'info') {
            const console = document.getElementById('console-output');
            const timestamp = new Date().toLocaleTimeString();
            const entry = document.createElement('div');
            entry.className = level;
            entry.innerHTML = '<span class="timestamp">[' + timestamp + ']</span> ' + message;
            console.appendChild(entry);
            console.scrollTop = console.scrollHeight;
        }

        function openTeleprompter() {
            window.open('/teleprompter', 'teleprompter', 'width=800,height=600');
        }

        function openCharacterTeleprompter(character) {
            const url = `/teleprompter/${character}`;
            window.open(url, `teleprompter-${character}`, 'width=800,height=600');
        }

        function testTeleprompter() {
            // First send a message with an image
            fetch('/teleprompter/updateTeleprompter', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    text: 'This is a test message with an image for the teleprompter.',
                    image: '/database/test_content/headshot.jpg'
                })
            });

            // Then send a message without an image
            setTimeout(() => {
                fetch('/teleprompter/updateTeleprompter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        text: 'This is a test message without an image for the teleprompter.'
                    })
                });
            }, 3000); // Wait 3 seconds before sending the second message
        }

        function testTeleprompterVideo() {
            fetch('/teleprompter/playTeleprompterVideo', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    videoPath: '/database/test_content/freefall.mp4'
                })
            });
        }

        function clearTeleprompter() {
            fetch('/teleprompter/clearTeleprompter', { method: 'POST' })
                .then(res => res.json())
                .then(info => {
                    document.getElementById('status').innerText = info.message;
                })
                .catch(err => {
                    console.error(err);
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        function initScene(directory) {
            fetch('/initScene/' + encodeURIComponent(directory))
                .then(res => res.json())
                .then(info => {
                    document.getElementById('status').innerText = info.message;
                })
                .catch(err => {
                    console.error(err);
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        function actorsReady() {
            document.getElementById('status').innerText = 'Notifying system that actors are ready...';
            fetch('/actorsReady', { method: 'POST' })
                .then(res => res.json())
                .then(info => {
                    document.getElementById('status').innerText = info.message;
                })
                .catch(err => {
                    console.error(err);
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        function recordVideo() {
            document.getElementById('status').innerText = 'Recording video...';
            fetch('/camera/recordVideo')
                .then(res => res.json())
                .then(info => {
                    if (!info.success) {
                        document.getElementById('status').innerText = 'Error: ' + info.message;
                        return;
                    }
                    document.getElementById('status').innerText = info.message || 'Video recorded.';
                    const vidDiv = document.getElementById('videos');
                    vidDiv.innerHTML = `
            <h3>Original Video</h3>
            <video controls src="/video/${info.originalName}"></video>
            <h3>Overlay Video</h3>
            <video controls src="/video/${info.overlayName}"></video>
          `;
                })
                .catch(err => {
                    console.error(err);
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        function updatePTZ() {
            const data = {
                pan: parseInt(document.getElementById('panSlider').value),
                tilt: parseInt(document.getElementById('tiltSlider').value),
                zoom: parseInt(document.getElementById('zoomSlider').value)
            };

            // Update display values
            document.getElementById('panValue').textContent = (data.pan / 3600).toFixed(1) + '°';
            document.getElementById('tiltValue').textContent = (data.tilt / 3600).toFixed(1) + '°';
            document.getElementById('zoomValue').textContent = data.zoom + '%';

            // Send to server
            fetch('/camera/ptz', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
        }

        function selectCamera(camera) {
            if (!camera) return;

            fetch('/camera/selectCamera', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ camera })
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('status').innerText = data.message;
                        // Reinitialize webcam with selected camera
                        initWebcam(camera);
                    } else {
                        document.getElementById('status').innerText = 'Error: ' + data.message;
                    }
                })
                .catch(err => {
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        // Initialize camera controls when page loads
        window.addEventListener('load', async () => {
            console.log('Loading cameras...');
            try {
                // First get the list of available video devices
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(device => device.kind === 'videoinput');

                console.log('Available video devices:', videoDevices);

                // Get the server's camera list
                const response = await fetch('/camera/cameras');
                const cameras = await response.json();
                console.log('Server cameras:', cameras);

                const select = document.getElementById('cameraSelect');
                select.innerHTML = '<option value="">Select Camera</option>';

                // Add each camera from the server's list
                cameras.forEach(camera => {
                    const option = document.createElement('option');
                    option.value = camera.name;
                    option.textContent = camera.name;
                    option.dataset.device = camera.device;
                    option.dataset.isPTZ = camera.isPTZ;
                    select.appendChild(option);
                });

                // If we have video devices, try to initialize the first one
                if (videoDevices.length > 0) {
                    await initWebcam();
                }
            } catch (err) {
                console.error('Error loading cameras:', err);
                document.getElementById('status').innerText = 'Error loading cameras: ' + err.message;
            }
        });

        // Initialize webcam preview
        async function initWebcam(deviceId = null) {
            try {
                // Stop current stream if it exists
                const video = document.getElementById('webcamPreview');
                if (video.srcObject) {
                    video.srcObject.getTracks().forEach(track => track.stop());
                }

                // Get the selected camera option
                const cameraSelect = document.getElementById('cameraSelect');
                const selectedOption = cameraSelect.options[cameraSelect.selectedIndex];

                // Start with basic constraints
                const constraints = {
                    video: {
                        frameRate: { ideal: 30 }
                    }
                };

                // If we have a selected camera, try to use it
                if (selectedOption && selectedOption.value) {
                    try {
                        // First try with the device ID from the server
                        constraints.video.deviceId = { exact: selectedOption.dataset.device };
                        console.log('Trying to use device:', selectedOption.dataset.device);
                        const stream = await navigator.mediaDevices.getUserMedia(constraints);
                        video.srcObject = stream;

                        // Get the actual capabilities of the stream
                        const track = stream.getVideoTracks()[0];
                        const capabilities = track.getCapabilities();
                        console.log('Camera capabilities:', capabilities);

                        // Update status
                        document.getElementById('status').innerText = 'Camera initialized: ' + selectedOption.textContent;
                        return;
                    } catch (err) {
                        console.log('Failed with device ID, trying alternative method...', err);

                        // Try to find the device in the enumerated devices
                        const devices = await navigator.mediaDevices.enumerateDevices();
                        const videoDevices = devices.filter(device => device.kind === 'videoinput');
                        const matchingDevice = videoDevices.find(device =>
                            device.label.toLowerCase().includes(selectedOption.textContent.toLowerCase())
                        );

                        if (matchingDevice) {
                            try {
                                constraints.video.deviceId = { exact: matchingDevice.deviceId };
                                console.log('Trying to use matching device:', matchingDevice.label);
                                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                                video.srcObject = stream;
                                document.getElementById('status').innerText = 'Camera initialized: ' + selectedOption.textContent;
                                return;
                            } catch (err) {
                                console.log('Failed with matching device, trying without deviceId...', err);
                            }
                        }

                        // If all else fails, try without deviceId
                        delete constraints.video.deviceId;
                    }
                }

                // Try to get the stream with basic constraints
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                video.srcObject = stream;

                // Get the actual capabilities of the stream
                const track = stream.getVideoTracks()[0];
                const capabilities = track.getCapabilities();
                console.log('Camera capabilities:', capabilities);

                // Update status
                document.getElementById('status').innerText = 'Camera initialized successfully';

            } catch (err) {
                console.error('Error accessing webcam:', err);
                document.getElementById('status').innerText = 'Error accessing webcam: ' + err.message;
            }
        }

        function updateResolution() {
            // Get current camera selection
            const cameraSelect = document.getElementById('cameraSelect');
            const selectedCamera = cameraSelect.value;
            // Reinitialize with current camera
            initWebcam(selectedCamera);
        }

        function initCameraControls() {
            // Initialize camera controls
            const panSlider = document.getElementById('panSlider');
            const tiltSlider = document.getElementById('tiltSlider');
            const zoomSlider = document.getElementById('zoomSlider');

            // Set initial values
            panSlider.value = 0;
            tiltSlider.value = 0;
            zoomSlider.value = 0;

            // Update display values
            document.getElementById('panValue').textContent = '0°';
            document.getElementById('tiltValue').textContent = '0°';
            document.getElementById('zoomValue').textContent = '0%';
        }

        function initSceneControls() {
            // Initialize scene controls
            const actionBtn = document.getElementById('actionBtn');
            const actorsReadyBtn = document.getElementById('actorsReadyBtn');

            // Set initial states
            actionBtn.style.display = 'none';
            actorsReadyBtn.style.display = 'none';
        }

        // Initialize everything when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            // Don't automatically initialize webcam on load
            // Let the user select a camera first
            initCameraControls();
            initSceneControls();
        });

        function action() {
            document.getElementById('status').innerText = 'Starting action...';
            fetch('/action', { method: 'POST' })
                .then(res => res.json())
                .then(info => {
                    document.getElementById('status').innerText = info.message;
                })
                .catch(err => {
                    console.error(err);
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        function testConsole() {
            fetch('/testConsole', { method: 'POST' })
                .then(res => res.json())
                .then(info => {
                    document.getElementById('status').innerText = info.message;
                })
                .catch(err => {
                    console.error(err);
                    document.getElementById('status').innerText = 'Error: ' + err;
                });
        }

        function loadActors() {
            // Create a hidden file input
            const input = document.createElement('input');
            input.type = 'file';
            input.webkitdirectory = true;
            input.directory = true;
            input.multiple = true;

            input.onchange = function (e) {
                const files = Array.from(e.target.files);
                const formData = new FormData();

                // Add all files to FormData
                files.forEach(file => {
                    formData.append('files', file);
                });

                document.getElementById('status').innerText = 'Loading actors...';

                fetch('/loadActors', {
                    method: 'POST',
                    body: formData
                })
                    .then(res => res.json())
                    .then(info => {
                        document.getElementById('status').innerText = info.message;
                        if (info.success) {
                            appendToConsole('Actors loaded successfully', 'info');
                        } else {
                            appendToConsole('Error loading actors: ' + info.message, 'error');
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        document.getElementById('status').innerText = 'Error: ' + err;
                        appendToConsole('Error loading actors: ' + err, 'error');
                    });
            };

            input.click();
        }
    </script>
</body>

</html>