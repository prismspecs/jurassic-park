<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Director Control Panel</title>
  <link rel="stylesheet" href="/views/styles/main.css" />
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
</head>

<body>
  <div class="page-layout">
    <!-- NEW Left Sidebar -->
    <div class="left-sidebar">
      <div class="controls-section card">
        <h2>Session Management</h2>
        <p><strong>Current Session:</strong> <span id="current-session-id">
            <%= currentSessionId %>
          </span></p>
        <p><strong>Existing Sessions:</strong></p>
        <div id="existing-sessions-list" class="session-list">
          <% if (existingSessions && existingSessions.length> 0) { %>
            <% existingSessions.forEach(session=> { %>
              <div class="session-item">
                <button class="session-button <%= session === currentSessionId ? 'active' : '' %>"
                  onclick="selectSession('<%= session %>')">
                  <%= session %>
                </button>
                <% if (session !==currentSessionId) { %>
                  <button class="delete-session-button" title="Delete session <%= session %>"
                    onclick="deleteSession('<%= session %>')">
                    ‚ùå
                  </button>
                  <% } %>
              </div>
              <% }); %>
                <% } else { %>
                  <p>No other sessions found.</p>
                  <% } %>
        </div>
      </div>
    </div>
    <!-- End Left Sidebar -->

    <!-- Main Content Area -->
    <div class="main-content">
      <h1>AI Director Shots</h1>
      <div class="scene-container">
        <% scenes.forEach((scene, idx)=> { %>
          <div class="scene-card" onclick="initScene('<%= encodeURIComponent(scene.directory) %>')">
            <div class="scene-title">
              Scene #<%= idx + 1 %>: <%= scene.description %>
            </div>
            <img src="./database/scenes/<%= scene.directory %>/thumbnail.jpg" alt="<%= scene.description %>" />
          </div>
          <% }); %>
      </div>
      <div id="videos"></div>

      <!-- MOVED Console Output back to Main Content -->
      <div class="controls-section card">
        <h2>Console Output</h2>
        <div id="console-output"></div>
      </div>
      <!-- End Console Output -->

    </div>
    <!-- End Main Content Area -->

    <!-- Right Sidebar -->
    <div class="sidebar">
      <!-- Removed Session Management -->
      <div class="controls-section card">
        <h2>Camera Controls</h2>
        <div id="cameraControls">
          <!-- Camera controls will be populated by CameraManager -->
        </div>
        <button onclick="cameraManager.addCamera()">Add Camera</button>
      </div>

      <div id="status"></div>

      <div class="controls-section card">
        <h2>Controls</h2>
        <div id="buttons">
          <div class="recording-options">
            <label for="recording-pipeline">Recording Pipeline:</label>
            <select id="recording-pipeline" class="form-control" onchange="handlePipelineChange(this.value)">
              <option value="gstreamer" selected>GStreamer (Default)</option>
              <option value="ffmpeg">FFmpeg</option>
            </select>
          </div>
          <div class="recording-options">
            <label for="recording-resolution">Recording Resolution:</label>
            <select id="recording-resolution" class="form-control">
              <option value="1920x1080" selected>1920x1080 (1080p)</option>
              <option value="3840x2160">3840x2160 (4K)</option>
              <option value="1280x720">1280x720 (720p)</option>
              <option value="640x480">640x480 (VGA)</option>
            </select>
          </div>
          <button id="actionBtn" onclick="action()"
            style="display: none; background-color: #e8f5e9; border-color: #4caf50; color: #2e7d32;">Action!</button>
          <button id="actorsReadyBtn" onclick="actorsReady()"
            style="display: none; background-color: #e8f5e9; border-color: #4caf50; color: #2e7d32;">Actors are
            Ready</button>
          <button onclick="recordVideo()">Test Record Video & Process Pose</button>
          <button id="voiceBypassBtn" onclick="toggleVoiceBypass()">Enable Voice Bypass</button>
          <button onclick="testConsole()">Test Console</button>

          <div class="actor-loading">
            <label for="actorFiles">Load Actors:</label>
            <input type="file" id="actorFiles" multiple accept=".json, .jpg, .jpeg, .png">
            <button id="loadActorsBtn">Load Selected</button>
            <p id="loadActorsStatus"></p>
          </div>

          <div class="audio-controls">
            <div class="group-label">Audio Controls</div>
            <button onclick="testAudioRecord()" class="success-btn">üé§ Record Audio (5s)</button>
            <button onclick="playLastRecording()" class="info-btn">‚ñ∂Ô∏è Play Last Recording</button>
            <button onclick="clearAudio()" class="warning-btn">üóëÔ∏è Clear Audio</button>
          </div>
          <div class="teleprompter-button-group">
            <div class="group-label">Teleprompter Controls</div>
            <button onclick="openTeleprompter()">Open Teleprompter</button>
            <button onclick="openCharacterTeleprompter('alan')">Open Alan's Teleprompter</button>
            <button onclick="openCharacterTeleprompter('ellie')">Open Ellie's Teleprompter</button>
            <button onclick="testTeleprompter()">Test Teleprompter</button>
            <button onclick="testTeleprompterVideo()">Test Teleprompter Video</button>
            <button onclick="clearTeleprompter()">Clear Teleprompter</button>
            <button onclick="pauseAllTeleprompters()" class="warning-btn">‚è∏Ô∏è Pause All Teleprompters</button>
            <button onclick="playAllTeleprompters()" class="success-btn">‚ñ∂Ô∏è Resume All Teleprompters</button>
          </div>
        </div>
      </div>

      <div class="controls-section card">
        <h2>Teleprompter Preview</h2>
        <div class="teleprompter-container">
          <iframe id="teleprompter-frame" src="/teleprompter"></iframe>
        </div>
      </div>

      <!-- Console moved to main content -->

    </div>
    <!-- End Right Sidebar -->

  </div> <!-- End Page Layout -->

  <script>
    const ws = new WebSocket("ws://" + window.location.host);
    const consoleOutput = document.getElementById("console-output"); // Updated selector
    let voiceBypassEnabled = true; // Keep state if needed

    ws.onopen = function () {
      console.log("WebSocket connection established");
      logToConsole("WebSocket connected", "info"); // Use new log function
      // Fetch initial voice bypass state
      fetch("/getVoiceBypass")
        .then((res) => res.json())
        .then((data) => {
          voiceBypassEnabled = data.enabled;
          updateVoiceBypassButton(); // Use helper function
        })
        .catch((err) => {
          console.error("Error fetching voice bypass state:", err);
        });
    };

    ws.onerror = function (error) {
      console.error("WebSocket error:", error);
      logToConsole("WebSocket error: " + error.message, "error");
    };

    ws.onclose = function () {
      console.log("WebSocket connection closed");
      logToConsole("WebSocket connection closed", "warn");
    };

    ws.onmessage = function (event) {
      try {
        const data = JSON.parse(event.data);
        console.log('Message from server:', data);

        if (data.type === 'CONSOLE') {
          logToConsole(data.message, data.level);
        } else if (data.type === 'SESSION_UPDATE') {
          // Update the display when session changes
          const currentSessionSpan = document.getElementById('current-session-id');
          if (currentSessionSpan) {
            currentSessionSpan.textContent = data.sessionId;
          }
          // Update button active state
          document.querySelectorAll('.session-button').forEach(button => {
            if (button.textContent.trim() === data.sessionId) {
              button.classList.add('active');
            } else {
              button.classList.remove('active');
            }
          });
          logToConsole(`Session updated to: ${data.sessionId}`, 'info');
        } else if (data.type === 'ACTORS_CALLED') {
          document.getElementById("actorsReadyBtn").style.display = "inline-block";
          document.getElementById("status").innerText = "Waiting for actors to be ready...";
        } else if (data.type === 'ACTORS_READY') {
          document.getElementById("actorsReadyBtn").style.display = "none";
          document.getElementById("actionBtn").style.display = "inline-block";
          document.getElementById("status").innerText = "Actors are ready to perform!";
        } else {
          // Handle other message types if necessary
          console.log("Received unhandled message type:", data.type);
        }
      } catch (error) {
        console.error('Error parsing message or handling update:', error);
        logToConsole('Received non-JSON message or error handling message.', 'error');
      }
    };

    // NEW Log function (replacing appendToConsole)
    function logToConsole(message, level = 'info') {
      const entry = document.createElement('div');
      const timestamp = new Date().toLocaleTimeString();
      entry.className = `log-entry log-${level}`;
      entry.innerHTML = `<span class="timestamp">[${timestamp}]</span> ${message}`;
      if (consoleOutput) {
        consoleOutput.appendChild(entry);
        consoleOutput.scrollTop = consoleOutput.scrollHeight; // Auto-scroll
      } else {
        console.error("Console output element not found!");
      }
    }

    // NEW Session Selection function
    async function selectSession(sessionId) {
      logToConsole(`Attempting to switch to session: ${sessionId}`, 'info');
      try {
        const response = await fetch('/api/select-session', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: `sessionId=${encodeURIComponent(sessionId)}`
        });
        const result = await response.json();
        if (response.ok && result.success) {
          logToConsole(`Successfully switched to session: ${sessionId}`, 'success');
          // The SESSION_UPDATE WS message should handle the UI update
        } else {
          throw new Error(result.message || 'Failed to select session');
        }
      } catch (error) {
        console.error('Error selecting session:', error);
        logToConsole(`Error selecting session: ${error.message}`, 'error');
      }
    }

    // NEW Delete Session function
    async function deleteSession(sessionId) {
      if (!confirm(`Are you sure you want to permanently delete session ${sessionId} and all its recordings?`)) {
        return; // Abort if user cancels
      }
      logToConsole(`Attempting to delete session: ${sessionId}`, 'warn');
      try {
        const response = await fetch(`/api/sessions/${encodeURIComponent(sessionId)}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if (response.ok && result.success) {
          logToConsole(`Successfully deleted session: ${sessionId}`, 'success');
          // Remove the session item from the UI
          const sessionList = document.getElementById('existing-sessions-list');
          const buttons = sessionList.querySelectorAll('button');
          buttons.forEach(button => {
            // Find the parent .session-item of the button matching the sessionId
            if (button.textContent.trim() === sessionId || button.title.includes(sessionId)) {
              const itemToRemove = button.closest('.session-item');
              if (itemToRemove) {
                itemToRemove.remove();
              }
            }
          });
          // Check if the list is now empty
          if (!sessionList.querySelector('.session-item')) {
            sessionList.innerHTML = '<p>No other sessions found.</p>';
          }
        } else {
          throw new Error(result.error || 'Failed to delete session');
        }
      } catch (error) {
        console.error('Error deleting session:', error);
        logToConsole(`Error deleting session ${sessionId}: ${error.message}`, 'error');
      }
    }

    // --- Existing Functions (adapted slightly) ---
    function updateVoiceBypassButton() {
      const btn = document.getElementById("voiceBypassBtn");
      if (btn) {
        btn.textContent = voiceBypassEnabled ? "Disable Voice Bypass" : "Enable Voice Bypass";
        btn.style.backgroundColor = voiceBypassEnabled ? "#ff4444" : "#4CAF50";
      }
    }

    function toggleVoiceBypass() {
      voiceBypassEnabled = !voiceBypassEnabled;
      updateVoiceBypassButton(); // Update UI
      // Send the bypass state to the server
      fetch("/setVoiceBypass", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ enabled: voiceBypassEnabled }),
      })
        .then((res) => res.json())
        .then((info) => { document.getElementById("status").innerText = info.message; })
        .catch((err) => { console.error(err); document.getElementById("status").innerText = "Error: " + err; });
    }

    function openTeleprompter() {
      window.open("/teleprompter", "teleprompter", "width=800,height=600");
    }

    function openCharacterTeleprompter(character) {
      window.open(`/teleprompter/${character}`, `teleprompter-${character}`, "width=800,height=600");
    }

    function testTeleprompter() {
      fetch("/teleprompter/updateTeleprompter", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text: "Test message with image", image: "/database/test_content/headshot.jpg" }), // Check path
      });
      setTimeout(() => {
        fetch("/teleprompter/updateTeleprompter", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ text: "Test message without image" }),
        });
      }, 3000);
    }

    function testTeleprompterVideo() {
      fetch("/teleprompter/playTeleprompterVideo", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ videoPath: "/database/test_content/freefall.mp4" }), // Check path
      });
    }

    function clearTeleprompter() {
      fetch("/teleprompter/clearTeleprompter", { method: "POST" })
        .then(res => res.json()).then(info => { document.getElementById("status").innerText = info.message; })
        .catch(err => { console.error(err); document.getElementById("status").innerText = "Error: " + err; });
    }

    function initScene(directory) {
      fetch("/initScene/" + encodeURIComponent(directory))
        .then(res => res.json()).then(info => { document.getElementById("status").innerText = info.message; })
        .catch(err => { console.error(err); document.getElementById("status").innerText = "Error: " + err; });
    }

    function actorsReady() {
      document.getElementById("status").innerText = "Notifying system: actors ready...";
      fetch("/actorsReady", { method: "POST" })
        .then(res => res.json()).then(info => { document.getElementById("status").innerText = info.message; })
        .catch(err => { console.error(err); document.getElementById("status").innerText = "Error: " + err; });
    }

    function handlePipelineChange(pipeline) {
      logToConsole(`Recording pipeline set to: ${pipeline}`, "info");
    }

    async function recordVideo() {
      document.getElementById("status").innerText = "Recording video...";
      const pipeline = document.getElementById("recording-pipeline").value;
      const useFfmpeg = pipeline === "ffmpeg";
      const resolution = document.getElementById("recording-resolution").value;
      logToConsole(`Starting recording with ${pipeline} pipeline at ${resolution}`, "info");
      try {
        logToConsole("Test Record Button: Needs implementation update for camera selection.", "warn");
        // Example call (needs camera name): 
        // await fetch(`/camera/Camera%201/record?useFfmpeg=${useFfmpeg}&resolution=${resolution}`, { method: 'POST' });

      } catch (error) {
        logToConsole(`Recording error: ${error.message}`, "error");
      }
    }

    function action() {
      document.getElementById("status").innerText = "Starting action...";
      fetch("/action", { method: "POST" })
        .then(res => res.json()).then(info => { document.getElementById("status").innerText = info.message; })
        .catch(err => { console.error(err); document.getElementById("status").innerText = "Error: " + err; });
    }

    function testConsole() {
      fetch("/testConsole", { method: "POST" })
        .then(res => res.json()).then(info => { document.getElementById("status").innerText = info.message; })
        .catch(err => { console.error(err); document.getElementById("status").innerText = "Error: " + err; });
    }

    function pauseAllTeleprompters() {
      ws.send(JSON.stringify({ type: "TELEPROMPTER_CONTROL", action: "PAUSE" }));
      logToConsole("Paused all teleprompters", "info");
    }

    function playAllTeleprompters() {
      ws.send(JSON.stringify({ type: "TELEPROMPTER_CONTROL", action: "PLAY" }));
      logToConsole("Resumed all teleprompters", "info");
    }

    // Audio Recording Functions (Adapted)
    let lastAudioRecording = null; // Keep track of last recording filename

    function testAudioRecord() {
      navigator.mediaDevices.getUserMedia({ audio: true })
        .then((stream) => {
          const mediaRecorder = new MediaRecorder(stream, { mimeType: "audio/webm" });
          const audioChunks = [];
          mediaRecorder.ondataavailable = (e) => { audioChunks.push(e.data); };
          mediaRecorder.onstop = async () => {
            const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
            const formData = new FormData();
            formData.append("audio", audioBlob, `rec_${Date.now()}.webm`); // Unique temp name
            try {
              const response = await fetch("/recordAudio", { method: "POST", body: formData });
              const data = await response.json();
              if (response.ok && data.success) {
                logToConsole(`Audio recorded: ${data.filename}`, "info");
                lastAudioRecording = data.filename; // Store filename (relative to session)
              } else {
                throw new Error(data.message || 'Failed to save audio');
              }
            } catch (err) {
              logToConsole(`Error recording audio: ${err.message}`, "error");
            }
          };
          mediaRecorder.start();
          logToConsole("Recording audio for 5 seconds...", "info");
          setTimeout(() => { mediaRecorder.stop(); stream.getTracks().forEach((track) => track.stop()); }, 5000);
        })
        .catch((err) => logToConsole(`Error accessing microphone: ${err.message}`, "error"));
    }

    function playLastRecording() {
      if (!lastAudioRecording) {
        logToConsole("No audio recording available to play", "warn");
        return;
      }
      const currentSessionId = document.getElementById('current-session-id')?.textContent;
      if (!currentSessionId) {
        logToConsole("Cannot determine current session ID to play audio.", "error");
        return;
      }
      // Assumes Express serves /recordings directory - **NEEDS SERVER SETUP**
      const audioUrl = `/recordings/${currentSessionId}/${lastAudioRecording}`;
      logToConsole(`Attempting to play: ${audioUrl}`, 'info'); // Log URL
      const audio = new Audio(audioUrl);
      audio.onerror = (e) => { // Added error handler
        console.error("Audio playback error:", e);
        logToConsole(`Error playing audio from ${audioUrl}: Check server setup and file path.`, "error");
      };
      audio.play()
        .then(() => logToConsole(`Playing ${lastAudioRecording}...`, "info"))
        .catch((err) => logToConsole(`Error initiating audio playback: ${err.message}`, "error"));
    }

    function clearAudio() {
      if (!lastAudioRecording) {
        logToConsole("No audio recording to clear", "warn");
        return;
      }
      logToConsole("Clear Audio button needs server-side implementation for session files.", "warn");
      // fetch("/clearAudio", { ... }) // Needs server endpoint
    }

    // Actor Loading Logic (Adapted)
    const loadActorsBtn = document.getElementById('loadActorsBtn');
    const actorFilesInput = document.getElementById('actorFiles');
    const loadActorsStatus = document.getElementById('loadActorsStatus');
    if (loadActorsBtn && actorFilesInput && loadActorsStatus) {
      loadActorsBtn.addEventListener('click', async () => {
        const files = actorFilesInput.files;
        if (files.length === 0) {
          loadActorsStatus.textContent = 'Please select files to load.';
          loadActorsStatus.className = 'status-error'; return;
        }
        const formData = new FormData();
        for (const file of files) { formData.append('files', file); }
        loadActorsStatus.textContent = 'Loading...';
        loadActorsStatus.className = 'status-info';
        try {
          const response = await fetch('/loadActors', { method: 'POST', body: formData });
          const result = await response.json();
          if (response.ok && result.success) {
            loadActorsStatus.textContent = result.message || 'Actors loaded!';
            loadActorsStatus.className = 'status-success';
            actorFilesInput.value = '';
          } else { throw new Error(result.message || 'Failed to load actors'); }
        } catch (error) {
          loadActorsStatus.textContent = `Error: ${error.message}`;
          loadActorsStatus.className = 'status-error';
        }
      });
    }

    // Camera management class placeholder
    class CameraManager { initialize() { console.log("CameraManager placeholder initialized"); } addCamera() { logToConsole("Add Camera clicked.", "info"); } }
    const cameraManager = new CameraManager();
    window.addEventListener("load", async () => {
      if (cameraManager.initialize) {
        await cameraManager.initialize();
      }
    });

  </script>

  <style>
    /* Add styles for session list */
    .session-list {
      max-height: 150px;
      overflow-y: auto;
      margin-top: 10px;
      border: 1px solid #ddd;
      padding: 5px;
    }

    .session-item {
      display: flex;
      align-items: center;
      margin-bottom: 5px;
    }

    .session-button {
      flex-grow: 1;
      /* Take available space */
      margin-right: 5px;
      /* Space before delete button */
      padding: 8px;
      text-align: left;
      border: 1px solid #ccc;
      background-color: #f9f9f9;
      cursor: pointer;
      box-sizing: border-box;
      white-space: nowrap;
      /* Prevent wrapping */
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .delete-session-button {
      padding: 4px 6px;
      background-color: #fdd;
      border: 1px solid #f99;
      color: #c00;
      cursor: pointer;
      font-size: 0.8em;
      line-height: 1;
      flex-shrink: 0;
      /* Prevent shrinking */
    }

    .delete-session-button:hover {
      background-color: #fcc;
      border-color: #f66;
    }

    .log-entry {
      font-family: monospace;
      margin-bottom: 3px;
      white-space: pre-wrap;
      font-size: 0.9em;
    }

    .log-timestamp {
      color: #888;
      margin-right: 5px;
    }

    .log-info {
      color: #333;
    }

    .log-warn {
      color: orange;
    }

    .log-error {
      color: red;
      font-weight: bold;
    }

    .log-success {
      color: green;
    }

    .actor-loading {
      margin-top: 15px;
      padding-top: 10px;
      border-top: 1px dashed #ccc;
    }

    .actor-loading label {
      display: block;
      margin-bottom: 5px;
    }

    .actor-loading input[type="file"] {
      display: block;
      margin-bottom: 10px;
    }

    #loadActorsStatus {
      margin-top: 5px;
      font-style: italic;
    }

    .status-info {
      color: #555;
    }

    .status-success {
      color: green;
    }

    .status-error {
      color: red;
    }

    /* --- ADDED Layout Styles --- */
    body {
      display: flex;
      margin: 0;
      height: 100vh;
      overflow: hidden;
      /* Prevent body scroll */
    }

    .page-layout {
      display: flex;
      width: 100%;
      height: 100%;
    }

    .left-sidebar {
      width: 250px;
      /* Adjust as needed */
      padding: 15px;
      border-right: 1px solid #ccc;
      overflow-y: auto;
      background-color: #f8f8f8;
      height: 100%;
      box-sizing: border-box;
    }

    .main-content {
      flex-grow: 1;
      /* Takes remaining space */
      padding: 15px;
      overflow-y: auto;
      height: 100%;
      box-sizing: border-box;
    }

    .sidebar {
      /* This is the RIGHT sidebar now */
      width: 350px;
      /* Adjust as needed */
      padding: 15px;
      border-left: 1px solid #ccc;
      overflow-y: auto;
      background-color: #f8f8f8;
      height: 100%;
      box-sizing: border-box;
    }

    .controls-section.card {
      margin-bottom: 20px;
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: #fff;
    }

    h1,
    h2 {
      margin-top: 0;
    }

    /* Adjust scene container if needed */
    .scene-container {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
    }

    .scene-card {
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 4px;
      width: 200px;
      /* Example width */
      cursor: pointer;
    }

    .scene-card:hover {
      border-color: #aaa;
    }

    .scene-card img {
      max-width: 100%;
      height: auto;
      display: block;
      margin-top: 10px;
    }

    #console-output {
      height: 300px;
      /* Example height */
      overflow-y: scroll;
      border: 1px solid #ccc;
      background-color: #fdfdfd;
      padding: 5px;
    }
  </style>
</body>

</html>